- hosts: master
  become: yes
  gather_facts: false
  tasks:
    - name: get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw
    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout }}"
    - name: fetch admin.conf from master
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: /tmp/config
        flat: yes

- hosts: workers
  become: yes
  gather_facts: false
  tasks:
    - name: remove swap
      shell: "swapoff -a"
    - name: Check if user data script is complete on slave
      shell: "cat /var/log/cloud-init-output.log | grep finished"
      register: userdata_status
      ignore_errors: true
      retries: 5
      delay: 10
    - name: Run the installation script script 
      shell: bash /tmp/script.sh
    - name: join cluster
      shell: "{{ hostvars['master'].join_command }} >> node_joined.txt"
      args:
        chdir: $HOME
        creates: node_joined.txt
    - name: create ubuntu .kube directory
      file:
        path: /home/ubuntu/.kube
        state: directory
    - name: create root .kube directory
      file:
        path: /root/.kube
        state: directory
    - name: copy admin.conf from fetched location to worker for ubuntu
      copy:
        src: /tmp/config
        dest: /home/ubuntu/.kube/config
        owner: ubuntu
    - name: copy admin.conf from fetched location to worker for root
      copy:
        src: /tmp/config
        dest: /root/.kube/config
        owner: root
    - name: clone the deployment
      shell: git clone https://github.com/justmorpheus/insecure-python-microservice.git /home/ubuntu/insecure-python-microservice
    - name: set permission of /home/ubuntu
      shell: "sudo chown ubuntu:ubuntu -R /home/ubuntu/"
    - name: Get the list of pods
      command: kubectl get pods
      register: pods_result
      until: pods_result.rc == 0
      retries: 5
      delay: 5

- hosts: worker1
  become: yes
  gather_facts: false
  tasks:
    - name: frontend deployment
      shell: kubectl apply -f /home/ubuntu/insecure-python-microservice/frontend/k8s/deployment.yaml
    - name: frontend service
      shell: kubectl apply -f /home/ubuntu/insecure-python-microservice/frontend/k8s/service.yaml
    - name: Check kubectl get pods status
      command: kubectl get pods
      register: kubectl_pods_result
      until: "'Running' in kubectl_pods_result.stdout or 'ContainerCreating' in kubectl_pods_result.stdout"
      retries: 5
      delay: 5
    - name: port forward frontend service
      shell: tmux new-session -d -s mysession 'kubectl port-forward svc/microservice1 8080:8080 --address='0.0.0.0''

- hosts: worker2
  become: yes
  gather_facts: false
  tasks:
    - name: backend deployment
      shell: kubectl apply -f /home/ubuntu/insecure-python-microservice/backend/k8s/deployment.yaml
    - name: backend service
      shell: kubectl apply -f /home/ubuntu/insecure-python-microservice/backend/k8s/service.yaml

    
    
